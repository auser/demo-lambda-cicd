"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
// src/index.ts
exports.handler = async (event) => {
    try {
        return await handle(event);
    }
    catch (e) {
        console.error(e);
        const errMsg = typeof e.message === "string" && e.message.startsWith("ClientError:")
            ? e.message
            : "InternalServerError";
        return {
            statusCode: errMsg === "InternalServerError" ? 500 : 400,
            body: errMsg,
        };
    }
};
exports.default = exports.handler;
const handle = async (event) => {
    const params = event.queryStringParameters;
    if (!params) {
        throw new Error(`ClientError: parameters cannot be empty`);
    }
    const type = params.type || "states";
    const url = `https://corona.lmao.ninja/v2/${type}`;
    try {
        const resp = await axios_1.default({ url, method: "GET" });
        const data = resp.data;
        return {
            statusCode: 200,
            body: JSON.stringify(data),
        };
    }
    catch (e) {
        throw new Error(e);
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFLQSxrREFBMEI7QUFpQjFCLGVBQWU7QUFDRixRQUFBLE9BQU8sR0FBRyxLQUFLLEVBQzFCLEtBQXNCLEVBQ1UsRUFBRTtJQUNsQyxJQUFJO1FBQ0YsT0FBTyxNQUFNLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUM1QjtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1YsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqQixNQUFNLE1BQU0sR0FDVixPQUFPLENBQUMsQ0FBQyxPQUFPLEtBQUssUUFBUSxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQztZQUNuRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU87WUFDWCxDQUFDLENBQUMscUJBQXFCLENBQUM7UUFDNUIsT0FBTztZQUNMLFVBQVUsRUFBRSxNQUFNLEtBQUsscUJBQXFCLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRztZQUN4RCxJQUFJLEVBQUUsTUFBTTtTQUNiLENBQUM7S0FDSDtBQUNILENBQUMsQ0FBQztBQUVGLGtCQUFlLGVBQU8sQ0FBQztBQUV2QixNQUFNLE1BQU0sR0FBRyxLQUFLLEVBQ2xCLEtBQTJCLEVBQ0ssRUFBRTtJQUNsQyxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMscUJBQXFCLENBQUM7SUFFM0MsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNYLE1BQU0sSUFBSSxLQUFLLENBQUMseUNBQXlDLENBQUMsQ0FBQztLQUM1RDtJQUNELE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLElBQUksUUFBUSxDQUFDO0lBQ3JDLE1BQU0sR0FBRyxHQUFHLGdDQUFnQyxJQUFJLEVBQUUsQ0FBQztJQUNuRCxJQUFJO1FBQ0YsTUFBTSxJQUFJLEdBQUcsTUFBTSxlQUFLLENBQUMsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDakQsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztRQUV2QixPQUFPO1lBQ0wsVUFBVSxFQUFFLEdBQUc7WUFDZixJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUM7U0FDM0IsQ0FBQztLQUNIO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDVixNQUFNLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3BCO0FBQ0gsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQVBJR2F0ZXdheUV2ZW50LFxuICBBUElHYXRld2F5UHJveHlSZXN1bHQsXG4gIEFQSUdhdGV3YXlQcm94eUV2ZW50LFxufSBmcm9tIFwiYXdzLWxhbWJkYVwiO1xuaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiO1xuXG5pbnRlcmZhY2UgU3RhdGVEYXRhIHtcbiAgc3RhdGU6IHN0cmluZztcbiAgY2FzZXM6IE51bWJlcjtcbiAgdG9kYXlDYXNlczogTnVtYmVyO1xuICBkZWF0aHM6IE51bWJlcjtcbiAgdG9kYXlEZWF0aHM6IE51bWJlcjtcbiAgYWN0aXZlOiBOdW1iZXI7XG4gIHRlc3RzOiBOdW1iZXI7XG4gIHRlc3RzUGVyT25lTWlsbGlvbjogTnVtYmVyO1xufVxudHlwZSBTZXJ2ZXJEYXRhID0gU3RhdGVEYXRhO1xuaW50ZXJmYWNlIFNlcnZlclJlc3BvbnNlIHtcbiAgZGF0YTogU2VydmVyRGF0YTtcbn1cblxuLy8gc3JjL2luZGV4LnRzXG5leHBvcnQgY29uc3QgaGFuZGxlciA9IGFzeW5jIChcbiAgZXZlbnQ6IEFQSUdhdGV3YXlFdmVudFxuKTogUHJvbWlzZTxBUElHYXRld2F5UHJveHlSZXN1bHQ+ID0+IHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gYXdhaXQgaGFuZGxlKGV2ZW50KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgY29uc3QgZXJyTXNnID1cbiAgICAgIHR5cGVvZiBlLm1lc3NhZ2UgPT09IFwic3RyaW5nXCIgJiYgZS5tZXNzYWdlLnN0YXJ0c1dpdGgoXCJDbGllbnRFcnJvcjpcIilcbiAgICAgICAgPyBlLm1lc3NhZ2VcbiAgICAgICAgOiBcIkludGVybmFsU2VydmVyRXJyb3JcIjtcbiAgICByZXR1cm4ge1xuICAgICAgc3RhdHVzQ29kZTogZXJyTXNnID09PSBcIkludGVybmFsU2VydmVyRXJyb3JcIiA/IDUwMCA6IDQwMCxcbiAgICAgIGJvZHk6IGVyck1zZyxcbiAgICB9O1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBoYW5kbGVyO1xuXG5jb25zdCBoYW5kbGUgPSBhc3luYyAoXG4gIGV2ZW50OiBBUElHYXRld2F5UHJveHlFdmVudFxuKTogUHJvbWlzZTxBUElHYXRld2F5UHJveHlSZXN1bHQ+ID0+IHtcbiAgY29uc3QgcGFyYW1zID0gZXZlbnQucXVlcnlTdHJpbmdQYXJhbWV0ZXJzO1xuXG4gIGlmICghcGFyYW1zKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBDbGllbnRFcnJvcjogcGFyYW1ldGVycyBjYW5ub3QgYmUgZW1wdHlgKTtcbiAgfVxuICBjb25zdCB0eXBlID0gcGFyYW1zLnR5cGUgfHwgXCJzdGF0ZXNcIjtcbiAgY29uc3QgdXJsID0gYGh0dHBzOi8vY29yb25hLmxtYW8ubmluamEvdjIvJHt0eXBlfWA7XG4gIHRyeSB7XG4gICAgY29uc3QgcmVzcCA9IGF3YWl0IGF4aW9zKHsgdXJsLCBtZXRob2Q6IFwiR0VUXCIgfSk7XG4gICAgY29uc3QgZGF0YSA9IHJlc3AuZGF0YTtcblxuICAgIHJldHVybiB7XG4gICAgICBzdGF0dXNDb2RlOiAyMDAsXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhKSxcbiAgICB9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGUpO1xuICB9XG59O1xuIl19